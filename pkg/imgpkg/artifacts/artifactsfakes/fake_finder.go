// Code generated by counterfeiter. DO NOT EDIT.
package artifactsfakes

import (
	"sync"

	"github.com/google/go-containerregistry/pkg/name"
	"github.com/vmware-tanzu/carvel-imgpkg/pkg/imgpkg/artifacts"
	"github.com/vmware-tanzu/carvel-imgpkg/pkg/imgpkg/imageset"
)

type FakeFinder struct {
	AttestationStub        func(name.Digest) (imageset.UnprocessedImageRef, error)
	attestationMutex       sync.RWMutex
	attestationArgsForCall []struct {
		arg1 name.Digest
	}
	attestationReturns struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}
	attestationReturnsOnCall map[int]struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}
	SBOMStub        func(name.Digest) (imageset.UnprocessedImageRef, error)
	sBOMMutex       sync.RWMutex
	sBOMArgsForCall []struct {
		arg1 name.Digest
	}
	sBOMReturns struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}
	sBOMReturnsOnCall map[int]struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}
	SignatureStub        func(name.Digest) (imageset.UnprocessedImageRef, error)
	signatureMutex       sync.RWMutex
	signatureArgsForCall []struct {
		arg1 name.Digest
	}
	signatureReturns struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}
	signatureReturnsOnCall map[int]struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFinder) Attestation(arg1 name.Digest) (imageset.UnprocessedImageRef, error) {
	fake.attestationMutex.Lock()
	ret, specificReturn := fake.attestationReturnsOnCall[len(fake.attestationArgsForCall)]
	fake.attestationArgsForCall = append(fake.attestationArgsForCall, struct {
		arg1 name.Digest
	}{arg1})
	stub := fake.AttestationStub
	fakeReturns := fake.attestationReturns
	fake.recordInvocation("Attestation", []interface{}{arg1})
	fake.attestationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFinder) AttestationCallCount() int {
	fake.attestationMutex.RLock()
	defer fake.attestationMutex.RUnlock()
	return len(fake.attestationArgsForCall)
}

func (fake *FakeFinder) AttestationCalls(stub func(name.Digest) (imageset.UnprocessedImageRef, error)) {
	fake.attestationMutex.Lock()
	defer fake.attestationMutex.Unlock()
	fake.AttestationStub = stub
}

func (fake *FakeFinder) AttestationArgsForCall(i int) name.Digest {
	fake.attestationMutex.RLock()
	defer fake.attestationMutex.RUnlock()
	argsForCall := fake.attestationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFinder) AttestationReturns(result1 imageset.UnprocessedImageRef, result2 error) {
	fake.attestationMutex.Lock()
	defer fake.attestationMutex.Unlock()
	fake.AttestationStub = nil
	fake.attestationReturns = struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) AttestationReturnsOnCall(i int, result1 imageset.UnprocessedImageRef, result2 error) {
	fake.attestationMutex.Lock()
	defer fake.attestationMutex.Unlock()
	fake.AttestationStub = nil
	if fake.attestationReturnsOnCall == nil {
		fake.attestationReturnsOnCall = make(map[int]struct {
			result1 imageset.UnprocessedImageRef
			result2 error
		})
	}
	fake.attestationReturnsOnCall[i] = struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) SBOM(arg1 name.Digest) (imageset.UnprocessedImageRef, error) {
	fake.sBOMMutex.Lock()
	ret, specificReturn := fake.sBOMReturnsOnCall[len(fake.sBOMArgsForCall)]
	fake.sBOMArgsForCall = append(fake.sBOMArgsForCall, struct {
		arg1 name.Digest
	}{arg1})
	stub := fake.SBOMStub
	fakeReturns := fake.sBOMReturns
	fake.recordInvocation("SBOM", []interface{}{arg1})
	fake.sBOMMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFinder) SBOMCallCount() int {
	fake.sBOMMutex.RLock()
	defer fake.sBOMMutex.RUnlock()
	return len(fake.sBOMArgsForCall)
}

func (fake *FakeFinder) SBOMCalls(stub func(name.Digest) (imageset.UnprocessedImageRef, error)) {
	fake.sBOMMutex.Lock()
	defer fake.sBOMMutex.Unlock()
	fake.SBOMStub = stub
}

func (fake *FakeFinder) SBOMArgsForCall(i int) name.Digest {
	fake.sBOMMutex.RLock()
	defer fake.sBOMMutex.RUnlock()
	argsForCall := fake.sBOMArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFinder) SBOMReturns(result1 imageset.UnprocessedImageRef, result2 error) {
	fake.sBOMMutex.Lock()
	defer fake.sBOMMutex.Unlock()
	fake.SBOMStub = nil
	fake.sBOMReturns = struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) SBOMReturnsOnCall(i int, result1 imageset.UnprocessedImageRef, result2 error) {
	fake.sBOMMutex.Lock()
	defer fake.sBOMMutex.Unlock()
	fake.SBOMStub = nil
	if fake.sBOMReturnsOnCall == nil {
		fake.sBOMReturnsOnCall = make(map[int]struct {
			result1 imageset.UnprocessedImageRef
			result2 error
		})
	}
	fake.sBOMReturnsOnCall[i] = struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) Signature(arg1 name.Digest) (imageset.UnprocessedImageRef, error) {
	fake.signatureMutex.Lock()
	ret, specificReturn := fake.signatureReturnsOnCall[len(fake.signatureArgsForCall)]
	fake.signatureArgsForCall = append(fake.signatureArgsForCall, struct {
		arg1 name.Digest
	}{arg1})
	stub := fake.SignatureStub
	fakeReturns := fake.signatureReturns
	fake.recordInvocation("Signature", []interface{}{arg1})
	fake.signatureMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFinder) SignatureCallCount() int {
	fake.signatureMutex.RLock()
	defer fake.signatureMutex.RUnlock()
	return len(fake.signatureArgsForCall)
}

func (fake *FakeFinder) SignatureCalls(stub func(name.Digest) (imageset.UnprocessedImageRef, error)) {
	fake.signatureMutex.Lock()
	defer fake.signatureMutex.Unlock()
	fake.SignatureStub = stub
}

func (fake *FakeFinder) SignatureArgsForCall(i int) name.Digest {
	fake.signatureMutex.RLock()
	defer fake.signatureMutex.RUnlock()
	argsForCall := fake.signatureArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFinder) SignatureReturns(result1 imageset.UnprocessedImageRef, result2 error) {
	fake.signatureMutex.Lock()
	defer fake.signatureMutex.Unlock()
	fake.SignatureStub = nil
	fake.signatureReturns = struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) SignatureReturnsOnCall(i int, result1 imageset.UnprocessedImageRef, result2 error) {
	fake.signatureMutex.Lock()
	defer fake.signatureMutex.Unlock()
	fake.SignatureStub = nil
	if fake.signatureReturnsOnCall == nil {
		fake.signatureReturnsOnCall = make(map[int]struct {
			result1 imageset.UnprocessedImageRef
			result2 error
		})
	}
	fake.signatureReturnsOnCall[i] = struct {
		result1 imageset.UnprocessedImageRef
		result2 error
	}{result1, result2}
}

func (fake *FakeFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.attestationMutex.RLock()
	defer fake.attestationMutex.RUnlock()
	fake.sBOMMutex.RLock()
	defer fake.sBOMMutex.RUnlock()
	fake.signatureMutex.RLock()
	defer fake.signatureMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ artifacts.Finder = new(FakeFinder)
